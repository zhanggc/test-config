Mysql数据库利用版本号做来库存扣减避免脏写，但是存在一个网络问题会导致重复扣减库存: 当库存扣减update语句提交事务后，mysql执行事务成功;mysql将成功执行响应返回给应用时网络波动导致应用接收不到甚至连接断开异常,然后应用重新查询库存（其实已经扣减库存成功了）进行库存扣减;
例如:库存Stock表，库存数量count为10，版本号version为1
1、第一次进行库存扣减:update stock set count=9,version=2 where version=1;
2、事务执行成功但是网络波动导致应用接收不到甚至连接断开异常
3、重新查询库存,此时库存数量count为9，版本号version为2
4、第二次进行库存扣减:update stock set count=8,version=3 where version=2;
5、出现库存重复扣减

以上情况有出现可能吗?
如果可能出现以上情况，如何解决?




MrWish
-------------------------
积分抽奖奖励拉活活动
业务: 周末早上10点推送积分抽送活动，然后利用积分奖励与积分换购拉高用户活跃度，同时引导用户线下体验心愿先生盲盒购买
涉及主要微服务: 营销活动服务、订单服务、  商品服务、用户服务
主流程: 
1、用户进入积分抽奖旋转盘页面点击积分抽奖,向营销活动服务发起抽奖请求;订营销活动服务检验活动状态、生效时间、抽取次数效验;校验通过后,请求商品服务拉取所有积分商品库存并对有库存积分商品进行抽奖;
2、抽取出积分商品请求商品服务扣减该商品库存
3、订营销活动服务调用订单服务免支付下单接口, 保存积分商品交易凭证
4、请求用户服务增加用户积分
5、向用户展示抽取积分

技术优化:
1、抽取到的积分商品进行库存扣减成功后，直接返回给用户抽取积分;订单服务免支付下单、用户服务增加用户积分均通过订阅MQ消息异步处理，缩短请求响应时间；
2、商品服务库存扣减接口保证幂等性;利用Redis缓存做库存扣减, 降低数据库压力;在缓存中设置订单id扣减库存标识(订单id、商品id组成key), 防止重复扣减，保证幂等性
3、商品服务缓存库存扣减且异步消息同步数据库库存;数据库扣减库存利用死信队列做事务补偿，保证最终一致性
4、分布式事务解决订单创建、支付订单创建、积分扣减一致性
5、


1、异步处理：抽奖完成后，异步更新积分
2、消息中间件 积分奖励消息堆积处理


订单、库存、积分扣减 流程组合划分没经验

订单应该与支付组合，支付在前，订单依赖支付状态
库存应该与订单组合，库存在前，订单依赖库存扣减成功才能创建




库存扣减缓存、数据库 保持一致性 没经验


库存扣减 与 订单创建、积分扣减的布式事务保持一致性 没经验


一个线程中 多个服务调用 保证一致性

一个线程中 一个服务调用成功之后 由于不可抵抗因素导致线程挂掉，保证一致性






限时积分兑换商品业务
业务: 每周末早上10点开启积分兑换商品活动, 用户会用积攒下来积分来兑换商城上面商品
涉及主要微服务: 营销活动服务、订单服务、  商品服务、用户服务
主流程: 
1、用户进入积分换购商城选择商品进行积分兑换,向订单服务发起下单;订单服务向营销活动服务、商品服务、用户服务发起检验活动状态、生效时间、效验商品库存、用户积分余额;
2、校验通过后,向商品服务发起扣减库存, 向用户服务发起积分扣减;最后创建订单、支付订单;
技术优化:
1、校验环节利用多线程并发检验，缩短请求时间
2、商品服务库存扣减接口保证幂等性;利用Redis缓存做库存扣减, 并且在缓存中设置订单id扣减库存标识(订单id、商品id组成key), 防止重复扣减，保证幂等性
3、商品服务缓存库存扣减异步消息同步真实库存, 扣减库存利用死信队列做事务补偿，保证最终一致性
4、分布式事务解决订单创建、支付订单创建、积分扣减一致性



业务概念:
促销商品与商品模型设计: 1、促销商品也是一个商品;  2、促销商品 与 商品 共用一个商品仓库库存，下完单后也需要走出库审核流程
销售虚拟库存、仓库库存模型设计: SKU设计


业务流程梳理->技术对接->丰富业务场景为技术支撑
缓存库存扣减与MQ消息异步扣减真实库存一致性: 事务消息:https://www.cnblogs.com/goodAndyxublog/p/12596402.html

华为应用市场
----------------------------------------------------------------------------------------------------------
AGC抓包应用上架审核业务线程优化:
抓包优先级线程池、处理应用线程跟踪、forkjoin 并行处理、线程池参数动态化配置
并行流csdn:
https://blog.csdn.net/u014589856/article/details/78851399?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161909168116780271546907%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161909168116780271546907&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-78851399.pc_search_result_cache&utm_term=java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AStream%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86




应用上架审核业务应用属性重复插入异常处理：
产生现象
1、处理apk预审检测结果DMQ消息通知 与 应用上架审核流程 都会对 相同应用属性进行插入；
2、触发处理时间比较接近，但不至于频繁发生
3、处理应用属性插入业务都有做重复性校验
原因分析以及解决方法
1、由于业务特性无法将两处应用属性插入归并到统一入口
2、由于 应用上架审核流程复杂，处于一个长事务; 因此插入应用属性还没有事务提交，导致预审检测结果DMQ消息通知里面重复性校验失效
3、放弃使用数据表唯一索引解决重复插入问题, 原因: 1、由于应用属性表数据量比较大，涉及将应用id、属性id、属性值三个字段建立唯一组合索引，索引存储空间比较大、插入速度变慢;2、代码需要对重复键异常进行try catch捕获处理保证业务正常运行， 很不优雅;3、后期涉及分库分表会导致唯一约束失效;
4、采用Redis分布式锁来解决, 应用id、属性id、属性值作为Key后缀一部分, 过期时间为2分钟，因为应用上架审核流程事务处理最长时间也10多秒;主要保证其中一方事务提交之前分布式锁还存在就能解决插入冲突; 








项目编写思路:

一、项目中使用到技术点

原则: 

1、业务开发在简历上起到什么作用:  技术在项目中落地，强调技术落地；所以业务是辅助，强调技术落地;

2、不用强调业务功能是否是你开发，只要你对该业务以及应用到技术足够熟悉，就可以认为你有参与开发

二、项目中难点以及如何去优化

一个业务涉及到串联技术栈

不同业务涉及到串联技术栈

Redis 缓存架构

RabbitMQ消息中间件架构

分布式架构

高可用: 核心服务链路断流

分布式事务

项目中业务中技术栈->负责开发业务
