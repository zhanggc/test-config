

MrWish
-------------------------
积分抽奖奖励拉活活动
业务: 周末早上10点推送积分抽送活动，然后利用积分奖励与积分换购拉高用户活跃度，同时引导用户线下体验心愿先生盲盒购买
涉及主要微服务: 营销活动服务、订单服务、  商品服务、用户服务
主流程: 
1、用户进入积分抽奖旋转盘页面点击积分抽奖,向营销活动服务发起抽奖请求;订营销活动服务检验活动状态、生效时间、抽取次数效验;校验通过后,请求商品服务拉取所有积分商品库存并对有库存积分商品进行抽奖;
2、抽取出积分商品请求商品服务扣减该商品库存
3、订营销活动服务调用订单服务免支付下单接口, 保存积分商品交易凭证
4、请求用户服务增加用户积分
5、向用户展示抽取积分

技术优化:
1、抽取到的积分商品进行库存扣减成功后，直接返回给用户抽取积分;订单服务免支付下单、用户服务增加用户积分均通过订阅MQ消息异步处理，缩短请求响应时间；
2、商品服务库存扣减接口保证幂等性;利用Redis缓存做库存扣减, 降低数据库压力;在缓存中设置订单id扣减库存标识(订单id、商品id组成key), 防止重复扣减，保证幂等性
3、商品服务缓存库存扣减且异步消息同步数据库库存;数据库扣减库存利用死信队列做事务补偿，保证最终一致性
4、周末早上由于抽奖流量很大，导致订单创建、积分扣减消息出现大量积压且用户延迟体验感差; 增加订单服务、积分服务实例，增强消费能力;增大单个Channel 预读取值;单个Channel使用线程池并行处理消息；
5、如何保证Redis商品库存扣减与MQ消息订单创建创建、积分扣减一致性?



限时积分兑换商品业务
业务: 每周末早上10点开启积分兑换商品活动, 用户会用积攒下来积分来兑换商城上面商品
涉及主要微服务: 营销活动服务、订单服务、  商品服务、用户服务
主流程: 
1、用户进入积分换购商城选择商品进行积分兑换,向订单服务发起下单;订单服务向营销活动服务、商品服务、用户服务发起检验活动状态、生效时间、效验商品库存、用户积分余额;
2、校验通过后,向商品服务发起扣减库存, 向用户服务发起积分扣减;最后创建订单、支付订单;
技术优化:
1、校验环节利用多线程并发检验，缩短请求时间
2、商品服务库存扣减接口保证幂等性;利用Redis缓存做库存扣减, 并且在缓存中设置订单id扣减库存标识(订单id、商品id组成key), 防止重复扣减，保证幂等性
3、商品服务缓存库存扣减异步消息同步真实库存, 扣减库存利用死信队列做事务补偿，保证最终一致性
4、分布式事务解决订单创建、支付订单创建、积分扣减一致性



业务概念:
促销商品与商品模型设计: 1、促销商品也是一个商品;  2、促销商品 与 商品 共用一个商品仓库库存，下完单后也需要走出库审核流程
销售虚拟库存、仓库库存模型设计: SKU设计


业务流程梳理->技术对接->丰富业务场景为技术支撑
缓存库存扣减与MQ消息异步扣减真实库存一致性: 事务消息:https://www.cnblogs.com/goodAndyxublog/p/12596402.html





华为应用市场内容管理中台
----------------------------------------------------------------------------------------------------------
华为应用市场内容管理中台负责应用市场商店内容信息管理业务，包括开发者应用管理、开发者用户管理、内容运营管理、数据源管理等业务;

运营管理平台部分服务组:
边缘微服务: 网关服务，统一管理对外接口暴露, 对接口进行鉴权、转发;面向应用市场运营平台门户提供服务;
权限查询微服务：提供权限校验引擎和人员、角色、维度等信息查询能力
操作日志微服务:应用市场统一的合规日志入口，提供操作日志的存储，合规审计查询等能力

应用管理流程部分服务组:
应用采集微服务:负责从AGC，抓包引擎，快应用中心，鸿蒙/PC类应用，运营上传等进行应用信息同步，并且转换成统一的格式交给后续去处理。
应用解析微服务：负责统一将各个采集源同步的应用信息进行应用信息解析，应用包解析，并且将解析好的应用进行入库，完成应用包的检测，应用包的上传
应用审核微服务:负责应用分配，应用自动上架，应用先上后审等规则管理;负责审核任务的管理;负责审核中电子流的处理;审核任务的查询和导出;下架规则，任务管理
应用文件处理微服务: 负责文件的下载，拷贝，CDN预热，视频上传到华为腾讯云等

数据库技术栈: Mybatis/Mysql/Rainbow数据库中/Redis
微服务技术栈:Java/Spring boot/华为开源微服务引擎CSE/STS安全票据服务
配置中心化管理:WiseEye动态配置中心/IAC配置项代码化管理
消息中间件: DMQ分布式消息中间件
分布式事务管理: ServiceComb Pack

总体技术架构:
边缘微服务作为应用市场运营平台门户网关,对接口进行统一鉴权、路由转发;
STS安全票据服务实现微服务之间认证以及加密传输过程中的敏感数据;
应用表实现分库分表Rainbow数据库中间件实现数据库读写分离、分库分表;
使用分布式框架ServiceComb Pack保证多个事务一致性;
采用DMQ分布式消息中间件，实现系统业务1、业务2流量削峰、提供接口响应速度;
采用Redis实现系统缓存抗住高并发降低数据库压力,实现分布式锁;


AGC抓包应用上架审核业务线程优化:
抓包优先级线程池、处理应用线程跟踪、forkjoin 并行处理、线程池参数动态化配置
并行流csdn:
https://blog.csdn.net/u014589856/article/details/78851399?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161909168116780271546907%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161909168116780271546907&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-78851399.pc_search_result_cache&utm_term=java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AStream%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86




应用上架审核业务应用属性重复插入异常处理：
产生现象
1、处理apk预审检测结果DMQ消息通知 与 应用上架审核流程 都会对 相同应用属性进行插入；
2、触发处理时间比较接近，但不至于频繁发生
3、处理应用属性插入业务都有做重复性校验
原因分析以及解决方法
1、由于业务特性无法将两处应用属性插入归并到统一入口
2、由于 应用上架审核流程复杂，处于一个长事务; 因此插入应用属性还没有事务提交，导致预审检测结果DMQ消息通知里面重复性校验失效
3、放弃使用数据表唯一索引解决重复插入问题, 原因: 1、由于应用属性表数据量比较大，涉及将应用id、属性id、属性值三个字段建立唯一组合索引，索引存储空间比较大、插入速度变慢;2、代码需要对重复键异常进行try catch捕获处理保证业务正常运行， 很不优雅;3、后期涉及分库分表会导致唯一约束失效;
4、采用Redis分布式锁来解决, 应用id、属性id、属性值作为Key后缀一部分, 过期时间为2分钟，因为应用上架审核流程事务处理最长时间也10多秒;主要保证其中一方事务提交之前分布式锁还存在就能解决插入冲突; 








项目编写思路:

一、项目中使用到技术点

原则: 

1、业务开发在简历上起到什么作用:  技术在项目中落地，强调技术落地；所以业务是辅助，强调技术落地;

2、不用强调业务功能是否是你开发，只要你对该业务以及应用到技术足够熟悉，就可以认为你有参与开发

二、项目中难点以及如何去优化

一个业务涉及到串联技术栈

不同业务涉及到串联技术栈

Redis 缓存架构

RabbitMQ消息中间件架构

分布式架构

高可用: 核心服务链路断流

分布式事务

项目中业务中技术栈->负责开发业务
